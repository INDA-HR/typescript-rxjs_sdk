// tslint:disable
/**
 * INDA HR - INtelligent Data Analysis for HR
 *  # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user\'s request only if their credits quota is greater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates\' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates\' personal information, and to put their attention on the candidate\'s skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is <span style=\"color:blue\">https<area>://api.inda.ai/hr/v2</span>. We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.  
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ClassificationMappingEscoResponse,
    ClassificationMappingIscoResponse,
    ClassificationMappingIstatResponse,
    ClassificationMappingOnetResponse,
    DescriptionInput,
    ErrorModel,
    EscoJobtitleResponse,
    EscoSkillResponse,
    HTTPValidationError,
    MostSimilarJobtitleResponseCategorized,
    MostSimilarSkillResponseCategorized,
} from '../models';

export interface EscoOccupationsHierarchyGETRequest {
    query: string;
    dstLang?: EscoOccupationsHierarchyGETDstLangEnum;
}

export interface EscoSkillsHierarchyGETRequest {
    query: string;
    dstLang?: EscoSkillsHierarchyGETDstLangEnum;
}

export interface FromDescriptionToEscoOccupationsPOSTRequest {
    descriptionInput: DescriptionInput;
    dstLang?: FromDescriptionToEscoOccupationsPOSTDstLangEnum;
    size?: number;
    minScore?: number;
}

export interface FromDescriptionToEscoSkillsPOSTRequest {
    descriptionInput: DescriptionInput;
    dstLang?: FromDescriptionToEscoSkillsPOSTDstLangEnum;
    size?: number;
    minScore?: number;
}

export interface MappingEscoGETRequest {
    code: string;
}

export interface MappingIscoGETRequest {
    code: string;
}

export interface MappingIstatCp2011GETRequest {
    code: string;
}

export interface MappingOnetGETRequest {
    code: string;
}

export interface SimilarEscoOccupationsGETRequest {
    query: string;
    dstLang?: SimilarEscoOccupationsGETDstLangEnum;
    size?: number;
    minScore?: number;
}

export interface SimilarEscoSkillsGETRequest {
    query: string;
    dstLang?: SimilarEscoSkillsGETDstLangEnum;
    size?: number;
    minScore?: number;
}

/**
 * no description
 */
export class ESCOApi extends BaseAPI {

    /**
     *  This method provides the most similar ESCO job title given a *jobtitle* (that could be a word or a sentence in several languages), its hierarchy classification according with ISCO classification, and the top three industries and job functions where the occupation is distributed.  More details about ESCO occupations hierarchy are showed [here](https://ec.europa.eu/esco/portal/occupation).  
     * ESCO Occupations Hierarchy
     */
    escoOccupationsHierarchyGET({ query: queryAlias, dstLang }: EscoOccupationsHierarchyGETRequest): Observable<MostSimilarJobtitleResponseCategorized>
    escoOccupationsHierarchyGET({ query: queryAlias, dstLang }: EscoOccupationsHierarchyGETRequest, opts?: OperationOpts): Observable<AjaxResponse<MostSimilarJobtitleResponseCategorized>>
    escoOccupationsHierarchyGET({ query: queryAlias, dstLang }: EscoOccupationsHierarchyGETRequest, opts?: OperationOpts): Observable<MostSimilarJobtitleResponseCategorized | AjaxResponse<MostSimilarJobtitleResponseCategorized>> {
        throwIfNullOrUndefined(queryAlias, 'queryAlias', 'escoOccupationsHierarchyGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'query': queryAlias,
        };

        if (dstLang != null) { query['dst_lang'] = dstLang; }

        return this.request<MostSimilarJobtitleResponseCategorized>({
            url: '/hr/v2/occupations/similar/esco/hierarchy/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method provides the most similar ESCO skills given a *query* (representing a skill) that could be a word or a sentence in several languages; also its hierarchy classification according with ESCO is returned.  More details about ESCO skills hierarchy are showed [here](https://ec.europa.eu/esco/portal/skill).  
     * ESCO Skills Hierarchy
     */
    escoSkillsHierarchyGET({ query: queryAlias, dstLang }: EscoSkillsHierarchyGETRequest): Observable<MostSimilarSkillResponseCategorized>
    escoSkillsHierarchyGET({ query: queryAlias, dstLang }: EscoSkillsHierarchyGETRequest, opts?: OperationOpts): Observable<AjaxResponse<MostSimilarSkillResponseCategorized>>
    escoSkillsHierarchyGET({ query: queryAlias, dstLang }: EscoSkillsHierarchyGETRequest, opts?: OperationOpts): Observable<MostSimilarSkillResponseCategorized | AjaxResponse<MostSimilarSkillResponseCategorized>> {
        throwIfNullOrUndefined(queryAlias, 'queryAlias', 'escoSkillsHierarchyGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'query': queryAlias,
        };

        if (dstLang != null) { query['dst_lang'] = dstLang; }

        return this.request<MostSimilarSkillResponseCategorized>({
            url: '/hr/v2/skills/similar/esco/hierarchy/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method provides the list of n most affine ESCO occupations given a sentence or a long description. For each returned occupation, the service provides also a list of the main related skills according to ESCO classification.  More details about ESCO occupations are showed [here](https://ec.europa.eu/esco/portal/occupation).  
     * From description to ESCO Occupations
     */
    fromDescriptionToEscoOccupationsPOST({ descriptionInput, dstLang, size, minScore }: FromDescriptionToEscoOccupationsPOSTRequest): Observable<EscoJobtitleResponse>
    fromDescriptionToEscoOccupationsPOST({ descriptionInput, dstLang, size, minScore }: FromDescriptionToEscoOccupationsPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<EscoJobtitleResponse>>
    fromDescriptionToEscoOccupationsPOST({ descriptionInput, dstLang, size, minScore }: FromDescriptionToEscoOccupationsPOSTRequest, opts?: OperationOpts): Observable<EscoJobtitleResponse | AjaxResponse<EscoJobtitleResponse>> {
        throwIfNullOrUndefined(descriptionInput, 'descriptionInput', 'fromDescriptionToEscoOccupationsPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (dstLang != null) { query['dst_lang'] = dstLang; }
        if (size != null) { query['size'] = size; }
        if (minScore != null) { query['min_score'] = minScore; }

        return this.request<EscoJobtitleResponse>({
            url: '/hr/v2/occupations/description/match/esco/',
            method: 'POST',
            headers,
            query,
            body: descriptionInput,
        }, opts?.responseOpts);
    };

    /**
     *  This method provides the list of n most affine ESCO skills given a sentence or a long description. For each returned skill, the service provides also a list of the main occupations where the skill is mandatory according to ESCO classification.  More details about ESCO skills are showed [here](https://ec.europa.eu/esco/portal/skill).  
     * From description to ESCO Skills
     */
    fromDescriptionToEscoSkillsPOST({ descriptionInput, dstLang, size, minScore }: FromDescriptionToEscoSkillsPOSTRequest): Observable<EscoSkillResponse>
    fromDescriptionToEscoSkillsPOST({ descriptionInput, dstLang, size, minScore }: FromDescriptionToEscoSkillsPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<EscoSkillResponse>>
    fromDescriptionToEscoSkillsPOST({ descriptionInput, dstLang, size, minScore }: FromDescriptionToEscoSkillsPOSTRequest, opts?: OperationOpts): Observable<EscoSkillResponse | AjaxResponse<EscoSkillResponse>> {
        throwIfNullOrUndefined(descriptionInput, 'descriptionInput', 'fromDescriptionToEscoSkillsPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (dstLang != null) { query['dst_lang'] = dstLang; }
        if (size != null) { query['size'] = size; }
        if (minScore != null) { query['min_score'] = minScore; }

        return this.request<EscoSkillResponse>({
            url: '/hr/v2/skills/description/match/esco/',
            method: 'POST',
            headers,
            query,
            body: descriptionInput,
        }, opts?.responseOpts);
    };

    /**
     *  This method provides the mapping from a [ESCO](https://ec.europa.eu/esco/portal) occupation code to: - [ISCO](https://www.ilo.org/public/english/bureau/stat/isco/) occupation codes; - [O*NET](https://www.onetonline.org/) occupation codes; - [ISTAT-CP2011](http://professioni.istat.it/cp2011/) occupation codes;  All requests are displayed in English. 
     * Mapping ESCO
     */
    mappingEscoGET({ code }: MappingEscoGETRequest): Observable<ClassificationMappingEscoResponse>
    mappingEscoGET({ code }: MappingEscoGETRequest, opts?: OperationOpts): Observable<AjaxResponse<ClassificationMappingEscoResponse>>
    mappingEscoGET({ code }: MappingEscoGETRequest, opts?: OperationOpts): Observable<ClassificationMappingEscoResponse | AjaxResponse<ClassificationMappingEscoResponse>> {
        throwIfNullOrUndefined(code, 'code', 'mappingEscoGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'code': code,
        };

        return this.request<ClassificationMappingEscoResponse>({
            url: '/hr/v2/occupations/mapping/esco/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method provides the mapping from a [ISCO](https://www.ilo.org/public/english/bureau/stat/isco/) occupation code to: - [ESCO](https://ec.europa.eu/esco/portal) occupation codes; - [O*NET](https://www.onetonline.org/) occupation codes; - [ISTAT-CP2011](http://professioni.istat.it/cp2011/) occupation codes;  All requests are displayed in English. 
     * Mapping ISCO
     */
    mappingIscoGET({ code }: MappingIscoGETRequest): Observable<ClassificationMappingIscoResponse>
    mappingIscoGET({ code }: MappingIscoGETRequest, opts?: OperationOpts): Observable<AjaxResponse<ClassificationMappingIscoResponse>>
    mappingIscoGET({ code }: MappingIscoGETRequest, opts?: OperationOpts): Observable<ClassificationMappingIscoResponse | AjaxResponse<ClassificationMappingIscoResponse>> {
        throwIfNullOrUndefined(code, 'code', 'mappingIscoGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'code': code,
        };

        return this.request<ClassificationMappingIscoResponse>({
            url: '/hr/v2/occupations/mapping/isco/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method provides the mapping from a [ISTAT-CP2011](http://professioni.istat.it/cp2011/) occupation code to: - [ESCO](https://ec.europa.eu/esco/portal) occupation codes; - [O*NET](https://www.onetonline.org/) occupation codes; - [ISCO](https://www.ilo.org/public/english/bureau/stat/isco/) occupation codes;  All requests are displayed in English. 
     * Mapping ISTAT-CP2011
     */
    mappingIstatCp2011GET({ code }: MappingIstatCp2011GETRequest): Observable<ClassificationMappingIstatResponse>
    mappingIstatCp2011GET({ code }: MappingIstatCp2011GETRequest, opts?: OperationOpts): Observable<AjaxResponse<ClassificationMappingIstatResponse>>
    mappingIstatCp2011GET({ code }: MappingIstatCp2011GETRequest, opts?: OperationOpts): Observable<ClassificationMappingIstatResponse | AjaxResponse<ClassificationMappingIstatResponse>> {
        throwIfNullOrUndefined(code, 'code', 'mappingIstatCp2011GET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'code': code,
        };

        return this.request<ClassificationMappingIstatResponse>({
            url: '/hr/v2/occupations/mapping/istat/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method provides the mapping from a [O*NET](https://www.onetonline.org/) occupation code to: - [ESCO](https://ec.europa.eu/esco/portal) occupation codes; - [ISTAT-CP2011](http://professioni.istat.it/cp2011/) occupation codes; - [ISCO](https://www.ilo.org/public/english/bureau/stat/isco/) occupation codes;  All requests are displayed in English. 
     * Mapping O*NET
     */
    mappingOnetGET({ code }: MappingOnetGETRequest): Observable<ClassificationMappingOnetResponse>
    mappingOnetGET({ code }: MappingOnetGETRequest, opts?: OperationOpts): Observable<AjaxResponse<ClassificationMappingOnetResponse>>
    mappingOnetGET({ code }: MappingOnetGETRequest, opts?: OperationOpts): Observable<ClassificationMappingOnetResponse | AjaxResponse<ClassificationMappingOnetResponse>> {
        throwIfNullOrUndefined(code, 'code', 'mappingOnetGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'code': code,
        };

        return this.request<ClassificationMappingOnetResponse>({
            url: '/hr/v2/occupations/mapping/onet/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method provides the list of n most similar ESCO occupations given a *jobtitle*. For each returned occupation, the service provides also a list of the main related skills according to ESCO classification.  More details about ESCO occupations are showed [here](https://ec.europa.eu/esco/portal/occupation).  
     * Similar ESCO Occupations
     */
    similarEscoOccupationsGET({ query: queryAlias, dstLang, size, minScore }: SimilarEscoOccupationsGETRequest): Observable<EscoJobtitleResponse>
    similarEscoOccupationsGET({ query: queryAlias, dstLang, size, minScore }: SimilarEscoOccupationsGETRequest, opts?: OperationOpts): Observable<AjaxResponse<EscoJobtitleResponse>>
    similarEscoOccupationsGET({ query: queryAlias, dstLang, size, minScore }: SimilarEscoOccupationsGETRequest, opts?: OperationOpts): Observable<EscoJobtitleResponse | AjaxResponse<EscoJobtitleResponse>> {
        throwIfNullOrUndefined(queryAlias, 'queryAlias', 'similarEscoOccupationsGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'query': queryAlias,
        };

        if (dstLang != null) { query['dst_lang'] = dstLang; }
        if (size != null) { query['size'] = size; }
        if (minScore != null) { query['min_score'] = minScore; }

        return this.request<EscoJobtitleResponse>({
            url: '/hr/v2/occupations/similar/esco/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method provides the list of n most similar ESCO skills given a *skill*. For each returned skill, the service provides also a list of the main occupations where the skill is mandatory according to ESCO classification.  More details about ESCO skills are showed [here](https://ec.europa.eu/esco/portal/skill).  
     * Similar ESCO Skills
     */
    similarEscoSkillsGET({ query: queryAlias, dstLang, size, minScore }: SimilarEscoSkillsGETRequest): Observable<EscoSkillResponse>
    similarEscoSkillsGET({ query: queryAlias, dstLang, size, minScore }: SimilarEscoSkillsGETRequest, opts?: OperationOpts): Observable<AjaxResponse<EscoSkillResponse>>
    similarEscoSkillsGET({ query: queryAlias, dstLang, size, minScore }: SimilarEscoSkillsGETRequest, opts?: OperationOpts): Observable<EscoSkillResponse | AjaxResponse<EscoSkillResponse>> {
        throwIfNullOrUndefined(queryAlias, 'queryAlias', 'similarEscoSkillsGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'query': queryAlias,
        };

        if (dstLang != null) { query['dst_lang'] = dstLang; }
        if (size != null) { query['size'] = size; }
        if (minScore != null) { query['min_score'] = minScore; }

        return this.request<EscoSkillResponse>({
            url: '/hr/v2/skills/similar/esco/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum EscoOccupationsHierarchyGETDstLangEnum {
    Bg = 'bg',
    Cs = 'cs',
    Da = 'da',
    De = 'de',
    El = 'el',
    En = 'en',
    Es = 'es',
    Et = 'et',
    Fi = 'fi',
    Fr = 'fr',
    Hr = 'hr',
    Hu = 'hu',
    It = 'it',
    Lt = 'lt',
    Lv = 'lv',
    Nl = 'nl',
    Pl = 'pl',
    Pt = 'pt',
    Ro = 'ro',
    Sk = 'sk',
    Sl = 'sl',
    Sv = 'sv'
}
/**
 * @export
 * @enum {string}
 */
export enum EscoSkillsHierarchyGETDstLangEnum {
    Bg = 'bg',
    Cs = 'cs',
    Da = 'da',
    De = 'de',
    El = 'el',
    En = 'en',
    Es = 'es',
    Et = 'et',
    Fi = 'fi',
    Fr = 'fr',
    Hr = 'hr',
    Hu = 'hu',
    It = 'it',
    Lt = 'lt',
    Lv = 'lv',
    Nl = 'nl',
    Pl = 'pl',
    Pt = 'pt',
    Ro = 'ro',
    Sk = 'sk',
    Sl = 'sl',
    Sv = 'sv'
}
/**
 * @export
 * @enum {string}
 */
export enum FromDescriptionToEscoOccupationsPOSTDstLangEnum {
    Bg = 'bg',
    Cs = 'cs',
    Da = 'da',
    De = 'de',
    El = 'el',
    En = 'en',
    Es = 'es',
    Et = 'et',
    Fi = 'fi',
    Fr = 'fr',
    Hr = 'hr',
    Hu = 'hu',
    It = 'it',
    Lt = 'lt',
    Lv = 'lv',
    Nl = 'nl',
    Pl = 'pl',
    Pt = 'pt',
    Ro = 'ro',
    Sk = 'sk',
    Sl = 'sl',
    Sv = 'sv'
}
/**
 * @export
 * @enum {string}
 */
export enum FromDescriptionToEscoSkillsPOSTDstLangEnum {
    Bg = 'bg',
    Cs = 'cs',
    Da = 'da',
    De = 'de',
    El = 'el',
    En = 'en',
    Es = 'es',
    Et = 'et',
    Fi = 'fi',
    Fr = 'fr',
    Hr = 'hr',
    Hu = 'hu',
    It = 'it',
    Lt = 'lt',
    Lv = 'lv',
    Nl = 'nl',
    Pl = 'pl',
    Pt = 'pt',
    Ro = 'ro',
    Sk = 'sk',
    Sl = 'sl',
    Sv = 'sv'
}
/**
 * @export
 * @enum {string}
 */
export enum SimilarEscoOccupationsGETDstLangEnum {
    Bg = 'bg',
    Cs = 'cs',
    Da = 'da',
    De = 'de',
    El = 'el',
    En = 'en',
    Es = 'es',
    Et = 'et',
    Fi = 'fi',
    Fr = 'fr',
    Hr = 'hr',
    Hu = 'hu',
    It = 'it',
    Lt = 'lt',
    Lv = 'lv',
    Nl = 'nl',
    Pl = 'pl',
    Pt = 'pt',
    Ro = 'ro',
    Sk = 'sk',
    Sl = 'sl',
    Sv = 'sv'
}
/**
 * @export
 * @enum {string}
 */
export enum SimilarEscoSkillsGETDstLangEnum {
    Bg = 'bg',
    Cs = 'cs',
    Da = 'da',
    De = 'de',
    El = 'el',
    En = 'en',
    Es = 'es',
    Et = 'et',
    Fi = 'fi',
    Fr = 'fr',
    Hr = 'hr',
    Hu = 'hu',
    It = 'it',
    Lt = 'lt',
    Lv = 'lv',
    Nl = 'nl',
    Pl = 'pl',
    Pt = 'pt',
    Ro = 'ro',
    Sk = 'sk',
    Sl = 'sl',
    Sv = 'sv'
}
