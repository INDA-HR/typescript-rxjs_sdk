// tslint:disable
/**
 * INDA HR - INtelligent Data Analysis for HR
 *  # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user\'s request only if their credits quota is greater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates\' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates\' personal information, and to put their attention on the candidate\'s skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is <span style=\"color:blue\">https<area>://api.inda.ai/hr/v2</span>. We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.  
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    CompanyAutocompleteResponse,
    CompanyIDResponse,
    CompanyRequest,
    ErrorModel,
    GetCompanyResponse,
    HTTPValidationError,
    PatchCompanyRequest,
    PatchCompanyResponse,
} from '../models';

export interface AddCompanyPOSTRequest {
    companyRequest: CompanyRequest;
}

export interface CompanyAutocompleteGETRequest {
    term: string;
    size?: number;
    tokenOrder?: CompanyAutocompleteGETTokenOrderEnum;
    fuzzy?: boolean;
}

export interface GetCompanyGETRequest {
    companyId: string;
}

export interface PatchCompanyPATCHRequest {
    companyId: string;
    patchCompanyRequest: PatchCompanyRequest;
}

/**
 * no description
 */
export class CompanyManagementApi extends BaseAPI {

    /**
     *  This method adds a company to a shared database and assigns it a *CompanyID* (namely, a Unique Universal ID or UUID4). This method requires an application/json as content type body.  On the right, we provide an example of input structure; further details are available in dedicated sections.  After successfully adding the company to INDA, this method returns the assigned *CompanyID*.  
     * Add Company
     */
    addCompanyPOST({ companyRequest }: AddCompanyPOSTRequest): Observable<CompanyIDResponse>
    addCompanyPOST({ companyRequest }: AddCompanyPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<CompanyIDResponse>>
    addCompanyPOST({ companyRequest }: AddCompanyPOSTRequest, opts?: OperationOpts): Observable<CompanyIDResponse | AjaxResponse<CompanyIDResponse>> {
        throwIfNullOrUndefined(companyRequest, 'companyRequest', 'addCompanyPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CompanyIDResponse>({
            url: '/hr/v2/company/',
            method: 'POST',
            headers,
            body: companyRequest,
        }, opts?.responseOpts);
    };

    /**
     *  This method performs company name autocompletion, based on INDA database of companies.  It helps users to explore the aforementioned database and search for companies data.  The *term* to be completed (see *query parameters* below) must contain at least *2* characters, and it is meant to match the *Name* of a company.  The output contains a list of names related to stored companies, along with their IDs.  
     * Company Autocomplete
     */
    companyAutocompleteGET({ term, size, tokenOrder, fuzzy }: CompanyAutocompleteGETRequest): Observable<CompanyAutocompleteResponse>
    companyAutocompleteGET({ term, size, tokenOrder, fuzzy }: CompanyAutocompleteGETRequest, opts?: OperationOpts): Observable<AjaxResponse<CompanyAutocompleteResponse>>
    companyAutocompleteGET({ term, size, tokenOrder, fuzzy }: CompanyAutocompleteGETRequest, opts?: OperationOpts): Observable<CompanyAutocompleteResponse | AjaxResponse<CompanyAutocompleteResponse>> {
        throwIfNullOrUndefined(term, 'term', 'companyAutocompleteGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'term': term,
        };

        if (size != null) { query['size'] = size; }
        if (tokenOrder != null) { query['token_order'] = tokenOrder; }
        if (fuzzy != null) { query['fuzzy'] = fuzzy; }

        return this.request<CompanyAutocompleteResponse>({
            url: '/hr/v2/company/name/search/autocomplete/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method returns the information related to the company stored with id *company_id*.  
     * Get Company
     */
    getCompanyGET({ companyId }: GetCompanyGETRequest): Observable<GetCompanyResponse>
    getCompanyGET({ companyId }: GetCompanyGETRequest, opts?: OperationOpts): Observable<AjaxResponse<GetCompanyResponse>>
    getCompanyGET({ companyId }: GetCompanyGETRequest, opts?: OperationOpts): Observable<GetCompanyResponse | AjaxResponse<GetCompanyResponse>> {
        throwIfNullOrUndefined(companyId, 'companyId', 'getCompanyGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<GetCompanyResponse>({
            url: '/hr/v2/company/{company_id}/'.replace('{company_id}', encodeURI(companyId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     *  This method updates the information related to the company stored with id *company_id*.  This method accepts an application/json body with the same structure as [Add Company](https://api.inda.ai/hr/docs/v2/#operation/add_company__POST), however in this case all fields are optional. Fields that contain differences between the corresponding original ones are substituted, while new fields are added. Bear in mind that lists are considered as singular value, therefore to modify an entry in a list it is necessary to insert the full list.  
     * Patch Company
     */
    patchCompanyPATCH({ companyId, patchCompanyRequest }: PatchCompanyPATCHRequest): Observable<PatchCompanyResponse>
    patchCompanyPATCH({ companyId, patchCompanyRequest }: PatchCompanyPATCHRequest, opts?: OperationOpts): Observable<AjaxResponse<PatchCompanyResponse>>
    patchCompanyPATCH({ companyId, patchCompanyRequest }: PatchCompanyPATCHRequest, opts?: OperationOpts): Observable<PatchCompanyResponse | AjaxResponse<PatchCompanyResponse>> {
        throwIfNullOrUndefined(companyId, 'companyId', 'patchCompanyPATCH');
        throwIfNullOrUndefined(patchCompanyRequest, 'patchCompanyRequest', 'patchCompanyPATCH');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<PatchCompanyResponse>({
            url: '/hr/v2/company/{company_id}/'.replace('{company_id}', encodeURI(companyId)),
            method: 'PATCH',
            headers,
            body: patchCompanyRequest,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum CompanyAutocompleteGETTokenOrderEnum {
    Any = 'any',
    Sequential = 'sequential'
}
