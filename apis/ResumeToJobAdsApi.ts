// tslint:disable
/**
 * INDA HR - INtelligent Data Analysis for HR
 *  # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user\'s request only if their credits quota is greater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates\' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates\' personal information, and to put their attention on the candidate\'s skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is <span style=\"color:blue\">https<area>://api.inda.ai/hr/v2</span>. We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.  
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    BaseJobadMatchingEvidenceQuery,
    BaseJobadMatchingQuery,
    ErrorModel,
    HTTPValidationError,
    JobadMatchingEvidenceQuery,
    JobadMatchingQuery,
    MatchJobAdEvidenceResponse,
    SearchJobAdMatchResponse,
} from '../models';

export interface MatchJobadsEvidenceFromIndexedResumePOSTRequest {
    indexname: string;
    resumeId: string;
    baseJobadMatchingEvidenceQuery: BaseJobadMatchingEvidenceQuery;
}

export interface MatchJobadsEvidencePOSTRequest {
    indexname: string;
    jobadMatchingEvidenceQuery: JobadMatchingEvidenceQuery;
    srcLang?: MatchJobadsEvidencePOSTSrcLangEnum;
}

export interface MatchJobadsFromIndexedResumePOSTRequest {
    indexname: string;
    resumeId: string;
    baseJobadMatchingQuery: BaseJobadMatchingQuery;
    size?: number;
    offset?: number;
    minScore?: number;
    dstLang?: Set<MatchJobadsFromIndexedResumePOSTDstLangEnum>;
    jobadLangs?: Set<MatchJobadsFromIndexedResumePOSTJobadLangsEnum>;
}

export interface MatchJobadsPOSTRequest {
    indexname: string;
    jobadMatchingQuery: JobadMatchingQuery;
    size?: number;
    offset?: number;
    minScore?: number;
    srcLang?: MatchJobadsPOSTSrcLangEnum;
    dstLang?: Set<MatchJobadsPOSTDstLangEnum>;
    jobadLangs?: Set<MatchJobadsPOSTJobadLangsEnum>;
}

/**
 * no description
 */
export class ResumeToJobAdsApi extends BaseAPI {

    /**
     * This method can be used for a registered resume; it is analogous to the The [Match JobAds Evidence](https://api.inda.ai/hr/docs/v2/#operation/match_jobads_evidence__POST) method, but it takes in input the ID of the resume instead of its JSON.  Please refer to the [Match JobAds Evidence](https://api.inda.ai/hr/docs/v2/#operation/match_jobads_evidence__POST) description for further details on the method and on its output.
     * Match JobAds Evidence from indexed Resume
     */
    matchJobadsEvidenceFromIndexedResumePOST({ indexname, resumeId, baseJobadMatchingEvidenceQuery }: MatchJobadsEvidenceFromIndexedResumePOSTRequest): Observable<MatchJobAdEvidenceResponse>
    matchJobadsEvidenceFromIndexedResumePOST({ indexname, resumeId, baseJobadMatchingEvidenceQuery }: MatchJobadsEvidenceFromIndexedResumePOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<MatchJobAdEvidenceResponse>>
    matchJobadsEvidenceFromIndexedResumePOST({ indexname, resumeId, baseJobadMatchingEvidenceQuery }: MatchJobadsEvidenceFromIndexedResumePOSTRequest, opts?: OperationOpts): Observable<MatchJobAdEvidenceResponse | AjaxResponse<MatchJobAdEvidenceResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'matchJobadsEvidenceFromIndexedResumePOST');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'matchJobadsEvidenceFromIndexedResumePOST');
        throwIfNullOrUndefined(baseJobadMatchingEvidenceQuery, 'baseJobadMatchingEvidenceQuery', 'matchJobadsEvidenceFromIndexedResumePOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<MatchJobAdEvidenceResponse>({
            url: '/hr/v2/index/{indexname}/jobads/matching/resume/{resume_id}/evidence/'.replace('{indexname}', encodeURI(indexname)).replace('{resume_id}', encodeURI(resumeId)),
            method: 'POST',
            headers,
            body: baseJobadMatchingEvidenceQuery,
        }, opts?.responseOpts);
    };

    /**
     * This method provides details about the score of a list of job adverts according to the matching with a given resume.  The method should be used after the call of [Match JobAds](https://api.inda.ai/hr/docs/v2/#operation/match_jobads__POST) or [Match JobAds from indexed Resume](https://api.inda.ai/hr/docs/v2/#operation/match_jobads_from_indexed_resume__POST), on a *JobadID* or a set of *JobadID*s returned by one of these methods, in order to obtain the evidence of the matching score.  The relevant information for the matching evidence is the same described in the [Match JobAds](https://api.inda.ai/hr/docs/v2/#operation/match_jobads__POST) method.  For each job advert *ID*, the method returns: + a matching score between the job advert\'s required and preferred [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework) and the candidate\'s one (if any); + a matching score between the job advert\'s required and preferred experience durations and the total duration of the candidate\'s work experiences (if any); + a matching score between the job advert\'s required and preferred seniorities and the candidate\'s seniority (if any); + a detail for each skill in the job advert, containing the relative matching score with respect to the resume; + a detail for each job title in the job advert, containing the relative matching score with respect to the resume.  Each aforementioned matching score has to be considered as an affinity score between job advert\'s and candidate\'s data, which contributes to the final [Match JobAds](https://api.inda.ai/hr/docs/v2/#operation/match_jobads__POST) response\'s <code style=\'color: #333333; opacity: 0.9\'>Score</code>.  Any *JobAdID* not corresponding to an available job advert in the index *indexname* will be ignored.  Note that the [Match JobAds Evidence from indexed Resume](https://api.inda.ai/hr/docs/v2/#operation/match_jobads_evidence_from_indexed_resume__POST), method can be used for a resume which has been already indexed.
     * Match JobAds Evidence
     */
    matchJobadsEvidencePOST({ indexname, jobadMatchingEvidenceQuery, srcLang }: MatchJobadsEvidencePOSTRequest): Observable<MatchJobAdEvidenceResponse>
    matchJobadsEvidencePOST({ indexname, jobadMatchingEvidenceQuery, srcLang }: MatchJobadsEvidencePOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<MatchJobAdEvidenceResponse>>
    matchJobadsEvidencePOST({ indexname, jobadMatchingEvidenceQuery, srcLang }: MatchJobadsEvidencePOSTRequest, opts?: OperationOpts): Observable<MatchJobAdEvidenceResponse | AjaxResponse<MatchJobAdEvidenceResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'matchJobadsEvidencePOST');
        throwIfNullOrUndefined(jobadMatchingEvidenceQuery, 'jobadMatchingEvidenceQuery', 'matchJobadsEvidencePOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (srcLang != null) { query['src_lang'] = srcLang; }

        return this.request<MatchJobAdEvidenceResponse>({
            url: '/hr/v2/index/{indexname}/jobads/matching/resume/evidence/'.replace('{indexname}', encodeURI(indexname)),
            method: 'POST',
            headers,
            query,
            body: jobadMatchingEvidenceQuery,
        }, opts?.responseOpts);
    };

    /**
     * This method performs a search among the job adverts in index *indexname* to find the best matches for a given resume already registered in INDA. To perform the search starting from the resume of a candidate not yet registered in INDA, please use the [Match JobAds](https://api.inda.ai/hr/docs/v2/#operation/match_jobads__POST), method.  The method can be used, for instance, in the career page in order to guide the candidate to the best matching with their resume. The method can also be used -- via scheduled execution over a pool of resumes -- to generate for each applicant a feed of  suggested job positions which are relevant for them, in order to improve candidate engagement.  Skills and job titles are particularly relevant and should be present in the resume to obtain an accurate matching. Other relevant information -- e.g., experience duration, [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework)  -- is retrieved from the resume and contributes to the pertinence score of each job adverts, provided that the index contains a sufficient number of job adverts with that information.
     * Match JobAds from indexed Resume
     */
    matchJobadsFromIndexedResumePOST({ indexname, resumeId, baseJobadMatchingQuery, size, offset, minScore, dstLang, jobadLangs }: MatchJobadsFromIndexedResumePOSTRequest): Observable<SearchJobAdMatchResponse>
    matchJobadsFromIndexedResumePOST({ indexname, resumeId, baseJobadMatchingQuery, size, offset, minScore, dstLang, jobadLangs }: MatchJobadsFromIndexedResumePOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<SearchJobAdMatchResponse>>
    matchJobadsFromIndexedResumePOST({ indexname, resumeId, baseJobadMatchingQuery, size, offset, minScore, dstLang, jobadLangs }: MatchJobadsFromIndexedResumePOSTRequest, opts?: OperationOpts): Observable<SearchJobAdMatchResponse | AjaxResponse<SearchJobAdMatchResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'matchJobadsFromIndexedResumePOST');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'matchJobadsFromIndexedResumePOST');
        throwIfNullOrUndefined(baseJobadMatchingQuery, 'baseJobadMatchingQuery', 'matchJobadsFromIndexedResumePOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (size != null) { query['size'] = size; }
        if (offset != null) { query['offset'] = offset; }
        if (minScore != null) { query['min_score'] = minScore; }
        if (dstLang != null) { query['dst_lang'] = dstLang; }
        if (jobadLangs != null) { query['jobad_langs'] = jobadLangs; }

        return this.request<SearchJobAdMatchResponse>({
            url: '/hr/v2/index/{indexname}/jobads/matching/resume/{resume_id}/'.replace('{indexname}', encodeURI(indexname)).replace('{resume_id}', encodeURI(resumeId)),
            method: 'POST',
            headers,
            query,
            body: baseJobadMatchingQuery,
        }, opts?.responseOpts);
    };

    /**
     * This method performs a search among the job adverts in index *indexname* to find the best matches for a given resume. To perform the search starting from a resume already registered in INDA, we suggest to use the [Match JobAds from indexed Resume](https://api.inda.ai/hr/docs/v2/#operation/match_jobads_from_indexed_resume__POST), method.  The method can be used, for instance, in the career page in order to guide the candidate to the best matching with their resume. The method can also be used -- via scheduled execution over a pool of resumes -- to generate for each candidate a feed of  suggested job positions which are relevant for them, in order to improve candidate engagement.  Skills and job titles are particularly relevant and should be present in the resume to obtain an accurate matching. Other relevant information -- e.g., experience duration, [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework)  -- is retrieved from the resume and contributes to the pertinence score of each job adverts, provided that the index contains a sufficient number of job adverts with that information.  Optionally, a list of [*query filters*](https://api.inda.ai/hr/docs/v2/#tag/Query-Filters) (*QueryFilters*) can be provided to narrow the query. We strongly encourage use of query_filters to reduce computation time and improve the result accuracy.
     * Match JobAds
     */
    matchJobadsPOST({ indexname, jobadMatchingQuery, size, offset, minScore, srcLang, dstLang, jobadLangs }: MatchJobadsPOSTRequest): Observable<SearchJobAdMatchResponse>
    matchJobadsPOST({ indexname, jobadMatchingQuery, size, offset, minScore, srcLang, dstLang, jobadLangs }: MatchJobadsPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<SearchJobAdMatchResponse>>
    matchJobadsPOST({ indexname, jobadMatchingQuery, size, offset, minScore, srcLang, dstLang, jobadLangs }: MatchJobadsPOSTRequest, opts?: OperationOpts): Observable<SearchJobAdMatchResponse | AjaxResponse<SearchJobAdMatchResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'matchJobadsPOST');
        throwIfNullOrUndefined(jobadMatchingQuery, 'jobadMatchingQuery', 'matchJobadsPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (size != null) { query['size'] = size; }
        if (offset != null) { query['offset'] = offset; }
        if (minScore != null) { query['min_score'] = minScore; }
        if (srcLang != null) { query['src_lang'] = srcLang; }
        if (dstLang != null) { query['dst_lang'] = dstLang; }
        if (jobadLangs != null) { query['jobad_langs'] = jobadLangs; }

        return this.request<SearchJobAdMatchResponse>({
            url: '/hr/v2/index/{indexname}/jobads/matching/resume/'.replace('{indexname}', encodeURI(indexname)),
            method: 'POST',
            headers,
            query,
            body: jobadMatchingQuery,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum MatchJobadsEvidencePOSTSrcLangEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum MatchJobadsFromIndexedResumePOSTDstLangEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum MatchJobadsFromIndexedResumePOSTJobadLangsEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum MatchJobadsPOSTSrcLangEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum MatchJobadsPOSTDstLangEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum MatchJobadsPOSTJobadLangsEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
