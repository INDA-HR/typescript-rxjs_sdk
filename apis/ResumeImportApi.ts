// tslint:disable
/**
 * INDA HR - INtelligent Data Analysis for HR
 *  # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user\'s request only if their credits quota is greater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates\' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates\' personal information, and to put their attention on the candidate\'s skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is <span style=\"color:blue\">https<area>://api.inda.ai/hr/v2</span>. We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.  
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    DocsImportItemRequest,
    ErrorModel,
    HTTPValidationError,
    ImportResponse,
    ImportStatus,
} from '../models';

export interface AwsImportPOSTRequest {
    indexname: string;
    docsImportItemRequest: DocsImportItemRequest;
}

export interface ImportStatusGETRequest {
    indexname: string;
    importId: string;
}

/**
 * no description
 */
export class ResumeImportApi extends BaseAPI {

    /**
     *  This method imports a collection of *Files* from a *Bucket* on Amazon S3 Storage Service into the INDA index  *indexname*.  *Intervieweb* customers do not need any  *Credentials*, because their files are already in the [Inrecruiting](https://www.in-recruiting.com/en/) cloud. For other users, we strongly recommend creating *ad-hoc credentials* with *read-only* rights. These credentials will not be stored by us anyway in any form.  The array of *Files* should contain a collection of resumes. Each file must have an *URL*, which is the file path inside the *Bucket*, an *InternalID* (i.e., an unique identifier used by the user internal system), and a *Resume*, which contains all the structured data to be imported in INDA. The *Resume* field has the same structure used in [Add Resume](https://api.inda.ai/hr/docs/v2/#operation/add_resume__POST), without the fields *Attachments.CV.File* (the file binary) and  *Attachments.CV.FileExt* (the file extension). The *Resume* data in the request will not be validated in input, but rather later during the request preprocessing.  The list of documents in the response accounts for documents that were successfully validated and downloaded from the *Bucket*. Note that these documents will be processed in the background before they can be uploaded to *indexname* and this may cause some small changes in the list of documents actually uploaded.  The response contains (*i*) a *Stats* field which provides a brief overview of the number of *Sent* and *Queued* documents, (*ii*) a list of queued *Resumes* with an INDA *ResumeID* and its user *InternalID*, and (*iii*) a list of *Errors* raised during the preprocessing stage.  In order to obtain updated information on the import progress and on the failures that might happen during the import process, the user can use the *import_id* through the following methods: + [Get Failures](https://api.inda.ai/hr/docs/v2/#operation/get_failures__GET) + [Import Status](https://api.inda.ai/hr/docs/v2/#operation/import_status__GET) 
     * AWS Import
     */
    awsImportPOST({ indexname, docsImportItemRequest }: AwsImportPOSTRequest): Observable<ImportResponse>
    awsImportPOST({ indexname, docsImportItemRequest }: AwsImportPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<ImportResponse>>
    awsImportPOST({ indexname, docsImportItemRequest }: AwsImportPOSTRequest, opts?: OperationOpts): Observable<ImportResponse | AjaxResponse<ImportResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'awsImportPOST');
        throwIfNullOrUndefined(docsImportItemRequest, 'docsImportItemRequest', 'awsImportPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ImportResponse>({
            url: '/hr/v2/index/{indexname}/resumes/import/aws/'.replace('{indexname}', encodeURI(indexname)),
            method: 'POST',
            headers,
            body: docsImportItemRequest,
        }, opts?.responseOpts);
    };

    /**
     *  This method returns the status of the import corresponding to the *import_id* indicated as query parameter (see the schema below). The status value may be one of the following: + *Pending*: the import is in INDA process queues; + *Running*: the import has begun; INDA is processeing the associated resumes; + *Completed*: the import is finished. 
     * Import Status
     */
    importStatusGET({ indexname, importId }: ImportStatusGETRequest): Observable<ImportStatus>
    importStatusGET({ indexname, importId }: ImportStatusGETRequest, opts?: OperationOpts): Observable<AjaxResponse<ImportStatus>>
    importStatusGET({ indexname, importId }: ImportStatusGETRequest, opts?: OperationOpts): Observable<ImportStatus | AjaxResponse<ImportStatus>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'importStatusGET');
        throwIfNullOrUndefined(importId, 'importId', 'importStatusGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'import_id': importId,
        };

        return this.request<ImportStatus>({
            url: '/hr/v2/index/{indexname}/resumes/import/aws/status/'.replace('{indexname}', encodeURI(indexname)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
