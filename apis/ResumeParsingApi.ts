// tslint:disable
/**
 * INDA HR - INtelligent Data Analysis for HR
 *  # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user\'s request only if their credits quota is greater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates\' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates\' personal information, and to put their attention on the candidate\'s skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is <span style=\"color:blue\">https<area>://api.inda.ai/hr/v2</span>. We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.  
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    BaseFile,
    BaseFileDoc,
    DocumentAnonymizationResponse,
    EntityInput,
    EntityMapping,
    ErrorModel,
    ExtractionItem,
    HTTPValidationError,
    MultiEntityInput,
    MultiEntityMapping,
    TextResponse,
} from '../models';

export interface AnonymizeCvPOSTRequest {
    baseFileDoc: BaseFileDoc;
    srcLang?: AnonymizeCvPOSTSrcLangEnum;
}

export interface BulkMapEntityPOSTRequest {
    multiEntityInput: MultiEntityInput;
}

export interface MapEntityPOSTRequest {
    entityInput: EntityInput;
}

export interface ParseResumePOSTRequest {
    baseFile: BaseFile;
    srcLang?: ParseResumePOSTSrcLangEnum;
    dstLang?: string;
    graphics?: boolean;
}

export interface TextExtractionPOSTRequest {
    baseFile: BaseFile;
}

/**
 * no description
 */
export class ResumeParsingApi extends BaseAPI {

    /**
     *  This method allows you to anonymize a CV/resume (only textual documents, not scanned documents or images) by  covering the main sensitive information in the document. Output is always a PDF file containing an anonymized copy of the source document.  Masked entities are: <code style=\'color: #333333; opacity: 0.9\'>given name</code>, <code style=\'color: #333333; opacity: 0.9\'>family name</code>, <code style=\'color: #333333; opacity: 0.9\'>birthdate</code>, <code style=\'color: #333333; opacity: 0.9\'>telephone numbers</code>, <code style=\'color: #333333; opacity: 0.9\'>emails</code>, <code style=\'color: #333333; opacity: 0.9\'>links</code>, <code style=\'color: #333333; opacity: 0.9\'>gender</code>, <code style=\'color: #333333; opacity: 0.9\'>nationality</code>, <code style=\'color: #333333; opacity: 0.9\'>profile picture</code>.  Supported extensions: <code style=\'color: #333333; opacity: 0.9\'>pdf</code>, <code style=\'color: #333333; opacity: 0.9\'>doc</code>, <code style=\'color: #333333; opacity: 0.9\'>docx</code>, <code style=\'color: #333333; opacity: 0.9\'>odt</code>, <code style=\'color: #333333; opacity: 0.9\'>txt</code>, <code style=\'color: #333333; opacity: 0.9\'>html</code>, <code style=\'color: #333333; opacity: 0.9\'>pptx</code>, <code style=\'color: #333333; opacity: 0.9\'>rtf</code>.  
     * Anonymize CV
     */
    anonymizeCvPOST({ baseFileDoc, srcLang }: AnonymizeCvPOSTRequest): Observable<DocumentAnonymizationResponse>
    anonymizeCvPOST({ baseFileDoc, srcLang }: AnonymizeCvPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<DocumentAnonymizationResponse>>
    anonymizeCvPOST({ baseFileDoc, srcLang }: AnonymizeCvPOSTRequest, opts?: OperationOpts): Observable<DocumentAnonymizationResponse | AjaxResponse<DocumentAnonymizationResponse>> {
        throwIfNullOrUndefined(baseFileDoc, 'baseFileDoc', 'anonymizeCvPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (srcLang != null) { query['src_lang'] = srcLang; }

        return this.request<DocumentAnonymizationResponse>({
            url: '/hr/v2/parse/resume/anonymize/',
            method: 'POST',
            headers,
            query,
            body: baseFileDoc,
        }, opts?.responseOpts);
    };

    /**
     *  This method wraps the [Map Entity](https://api.inda.ai/hr/docs/v2/#operation/map_entity__POST) method and allows a user to send all the entities to be mapped in one API call, e.g., for pagination purposes. Note that the request does not raise any Validation Error on the input data but instead it returns all the errors in the response. 
     * Bulk Map Entity
     */
    bulkMapEntityPOST({ multiEntityInput }: BulkMapEntityPOSTRequest): Observable<MultiEntityMapping>
    bulkMapEntityPOST({ multiEntityInput }: BulkMapEntityPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<MultiEntityMapping>>
    bulkMapEntityPOST({ multiEntityInput }: BulkMapEntityPOSTRequest, opts?: OperationOpts): Observable<MultiEntityMapping | AjaxResponse<MultiEntityMapping>> {
        throwIfNullOrUndefined(multiEntityInput, 'multiEntityInput', 'bulkMapEntityPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<MultiEntityMapping>({
            url: '/hr/v2/keywords/bulk/map/entity/',
            method: 'POST',
            headers,
            body: multiEntityInput,
        }, opts?.responseOpts);
    };

    /**
     *  This method maps an input string (ideally an entity extracted with the [Parse Resume](https://api.inda.ai/hr/docs/v2/#operation/parse_resume__POST) method) to the most similar string among a list of strings chosen by the user *(AllowedOutputs)*.  Note that, after a best match has been identified, it is actually presented as output only when it passes a *similarity check*, which takes into account the similarity of this best match with the input string, but also the similarity of the other elements of *allowed outputs* with the input string (namely, if many allowed outputs have a comparable similarity level, the *similarity check* is not passed, because there is not a clear winner). When the severity check is passed, the *id* of the best match is given in output (see the payload and response examples on the right); otherwise, an empty string is returned instead of the *id*. The severity of the similarity check can be controlled via the *severity* parameter, which takes value between <code style=\'color: #333333; opacity: 0.9\'>0</code> and <code style=\'color: #333333; opacity: 0.9\'>1</code>: a user who prefers to obtain the best match also when there is not guarantee it actually corresponds to the input string should set *severity* to a low value (i.e., close to <code style=\'color: #333333; opacity: 0.9\'>0</code>); vice versa, a user who prefers to have a response only when there is a high confidence in the correspondence should set *severity* to a large value (i.e., close to <code style=\'color: #333333; opacity: 0.9\'>1</code>); an intermediate value (such as the default value <code style=\'color: #333333; opacity: 0.9\'>0.5</code>) is appropriate in many situations.  The method has been specialized for different entity types, and for each of them it performs an analysis optimized over the specific type. The currently supported entity types are <code style=\'color: #333333; opacity: 0.9\'>Data.EducationExperiences.Organization.OrganizationName</code> and <code style=\'color: #333333; opacity: 0.9\'>Data.EducationExperiences.EducationTitle</code>. If the entity type is a string that does not match any of the supported entity types, the mapping is performed using a non-specialized method. 
     * Map Entity
     */
    mapEntityPOST({ entityInput }: MapEntityPOSTRequest): Observable<EntityMapping>
    mapEntityPOST({ entityInput }: MapEntityPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<EntityMapping>>
    mapEntityPOST({ entityInput }: MapEntityPOSTRequest, opts?: OperationOpts): Observable<EntityMapping | AjaxResponse<EntityMapping>> {
        throwIfNullOrUndefined(entityInput, 'entityInput', 'mapEntityPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<EntityMapping>({
            url: '/hr/v2/keywords/map/entity/',
            method: 'POST',
            headers,
            body: entityInput,
        }, opts?.responseOpts);
    };

    /**
     *  This method performs the *Information Extraction* from a resume, i.e., it recognizes the *named entities* contained in a given resume and reconstructs the relations between them, returning a structured information in the form of a json file. The method requires in input the *binary* and the *extension* of the file and automatically performs many steps: (*i*) Document Layout Analysis, (*ii*) Optical Character Recognition (if the input document is an image), (*iii*) Text Extraction, (*iv*) Named Entity Recognition, (*v*) Relation Extraction, and, finally, (*vi*) Face Recognition (which is carried out to identify, if present, the candidate photo).  The information provided in the output (see the schema below and the example on the right) can be used as structured data input for the [Add Resume](https://api.inda.ai/hr/docs/v2/#operation/add_resume__POST) method (some adjustments may be required).  The allowed file extensions are  <code style=\'color: #333333; opacity: 0.9\'>pdf</code>, <code style=\'color: #333333; opacity: 0.9\'>doc</code>, <code style=\'color: #333333; opacity: 0.9\'>docx</code>, <code style=\'color: #333333; opacity: 0.9\'>odt</code>, <code style=\'color: #333333; opacity: 0.9\'>txt</code>, <code style=\'color: #333333; opacity: 0.9\'>html</code>, <code style=\'color: #333333; opacity: 0.9\'>pptx</code>, <code style=\'color: #333333; opacity: 0.9\'>rtf</code>, <code style=\'color: #333333; opacity: 0.9\'>jpg</code>, <code style=\'color: #333333; opacity: 0.9\'>jpeg</code>, <code style=\'color: #333333; opacity: 0.9\'>png</code>, <code style=\'color: #333333; opacity: 0.9\'>tif</code>, <code style=\'color: #333333; opacity: 0.9\'>tiff</code> .  Please consider to use the [Info Extraction Feedback](https://api.inda.ai/hr/docs/v2/#operation/info_extraction_feedback__POST) to inform us about differences  between user\'s expectations and the actual data provided as output by INDA engine. It is very useful to improve our algorithms\' performances.  
     * Parse Resume
     */
    parseResumePOST({ baseFile, srcLang, dstLang, graphics }: ParseResumePOSTRequest): Observable<ExtractionItem>
    parseResumePOST({ baseFile, srcLang, dstLang, graphics }: ParseResumePOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<ExtractionItem>>
    parseResumePOST({ baseFile, srcLang, dstLang, graphics }: ParseResumePOSTRequest, opts?: OperationOpts): Observable<ExtractionItem | AjaxResponse<ExtractionItem>> {
        throwIfNullOrUndefined(baseFile, 'baseFile', 'parseResumePOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (srcLang != null) { query['src_lang'] = srcLang; }
        if (dstLang != null) { query['dst_lang'] = dstLang; }
        if (graphics != null) { query['graphics'] = graphics; }

        return this.request<ExtractionItem>({
            url: '/hr/v2/parse/resume/data/',
            method: 'POST',
            headers,
            query,
            body: baseFile,
        }, opts?.responseOpts);
    };

    /**
     *  This method extracts the text from a resume by performing the first steps of [Parse Resume](https://api.inda.ai/hr/docs/v2/#operation/parse_resume__POST). In particular, the method requires in input the *binary* and the *extension* of the file and automatically performs (*i*) Document Layout Analysis, (*ii*) Optical Character Recognition (if the input document is an image), and (*iii*) Text Extraction.  The allowed file extensions are  <code style=\'color: #333333; opacity: 0.9\'>pdf</code>, <code style=\'color: #333333; opacity: 0.9\'>doc</code>, <code style=\'color: #333333; opacity: 0.9\'>docx</code>, <code style=\'color: #333333; opacity: 0.9\'>odt</code>, <code style=\'color: #333333; opacity: 0.9\'>txt</code>, <code style=\'color: #333333; opacity: 0.9\'>html</code>, <code style=\'color: #333333; opacity: 0.9\'>pptx</code>, <code style=\'color: #333333; opacity: 0.9\'>rtf</code>, <code style=\'color: #333333; opacity: 0.9\'>jpg</code>, <code style=\'color: #333333; opacity: 0.9\'>jpeg</code>, <code style=\'color: #333333; opacity: 0.9\'>png</code>, <code style=\'color: #333333; opacity: 0.9\'>tif</code>, <code style=\'color: #333333; opacity: 0.9\'>tiff</code> .  
     * Text Extraction
     */
    textExtractionPOST({ baseFile }: TextExtractionPOSTRequest): Observable<TextResponse>
    textExtractionPOST({ baseFile }: TextExtractionPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<TextResponse>>
    textExtractionPOST({ baseFile }: TextExtractionPOSTRequest, opts?: OperationOpts): Observable<TextResponse | AjaxResponse<TextResponse>> {
        throwIfNullOrUndefined(baseFile, 'baseFile', 'textExtractionPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<TextResponse>({
            url: '/hr/v2/parse/resume/text/',
            method: 'POST',
            headers,
            body: baseFile,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum AnonymizeCvPOSTSrcLangEnum {
    It = 'it',
    En = 'en',
    Fr = 'fr',
    Pt = 'pt'
}
/**
 * @export
 * @enum {string}
 */
export enum ParseResumePOSTSrcLangEnum {
    It = 'it',
    En = 'en',
    Fr = 'fr',
    Pt = 'pt'
}
