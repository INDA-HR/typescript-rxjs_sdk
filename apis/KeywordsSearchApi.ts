// tslint:disable
/**
 * INDA HR - INtelligent Data Analysis for HR
 *  # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user\'s request only if their credits quota is greater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates\' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates\' personal information, and to put their attention on the candidate\'s skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is <span style=\"color:blue\">https<area>://api.inda.ai/hr/v2</span>. We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.  
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AutocompleteResponse,
    ErrorModel,
    HTTPValidationError,
    KeywordsResponse,
    SimilarWordsQuery,
} from '../models';

export interface KeywordsAutocompleteGETRequest {
    term: string;
}

export interface SimilarWordsInResumePOSTRequest {
    indexname: string;
    resumeId: string;
    similarWordsQuery: SimilarWordsQuery;
    size?: number;
    srcLang?: SimilarWordsInResumePOSTSrcLangEnum;
}

export interface SimilarWordsPOSTRequest {
    similarWordsQuery: SimilarWordsQuery;
    size?: number;
    srcLang?: SimilarWordsPOSTSrcLangEnum;
}

/**
 * no description
 */
export class KeywordsSearchApi extends BaseAPI {

    /**
     * This method performs token autocompletion, based on a INDA dictionary, i.e., a large dictionary specialized to recruiting domain. An example of application is to improve the user experience of a recruiter who is writing search keywords for candidate screening.  The *term* to be completed (see *query parameters* below) must contain at least *2* characters. The output contains a list of possible complete terms sorted with respect to the frequency in INDA dictionary (the list is associated with the key *candidates*, as shown in the example on the right).
     * Keywords Autocomplete
     */
    keywordsAutocompleteGET({ term }: KeywordsAutocompleteGETRequest): Observable<AutocompleteResponse>
    keywordsAutocompleteGET({ term }: KeywordsAutocompleteGETRequest, opts?: OperationOpts): Observable<AjaxResponse<AutocompleteResponse>>
    keywordsAutocompleteGET({ term }: KeywordsAutocompleteGETRequest, opts?: OperationOpts): Observable<AutocompleteResponse | AjaxResponse<AutocompleteResponse>> {
        throwIfNullOrUndefined(term, 'term', 'keywordsAutocompleteGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'term': term,
        };

        return this.request<AutocompleteResponse>({
            url: '/hr/v2/keywords/search/autocomplete/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * This method works as the method [Similar Words](https://api.inda.ai/hr/docs/v2/#operation/similar_words__POST), but it is restricted to the words contained in the resume *resume_id*.  It could be used, for instance, to inspect a document found via [Search Resumes](https://api.inda.ai/hr/docs/v2/#operation/search_resumes__POST) in order to have better insights on the most similar words in the document to each query term used.
     * Similar Words in Resume
     */
    similarWordsInResumePOST({ indexname, resumeId, similarWordsQuery, size, srcLang }: SimilarWordsInResumePOSTRequest): Observable<KeywordsResponse>
    similarWordsInResumePOST({ indexname, resumeId, similarWordsQuery, size, srcLang }: SimilarWordsInResumePOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<KeywordsResponse>>
    similarWordsInResumePOST({ indexname, resumeId, similarWordsQuery, size, srcLang }: SimilarWordsInResumePOSTRequest, opts?: OperationOpts): Observable<KeywordsResponse | AjaxResponse<KeywordsResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'similarWordsInResumePOST');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'similarWordsInResumePOST');
        throwIfNullOrUndefined(similarWordsQuery, 'similarWordsQuery', 'similarWordsInResumePOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (size != null) { query['size'] = size; }
        if (srcLang != null) { query['src_lang'] = srcLang; }

        return this.request<KeywordsResponse>({
            url: '/hr/v2/index/{indexname}/resume/{resume_id}/keywords/search/semantic/'.replace('{indexname}', encodeURI(indexname)).replace('{resume_id}', encodeURI(resumeId)),
            method: 'POST',
            headers,
            query,
            body: similarWordsQuery,
        }, opts?.responseOpts);
    };

    /**
     * Given a list of *query* terms, this method returns, for each term, the *size* most similar words found in vocabulary. The similarity of each result to the corresponding query term is rated with a score between <code style=\'color: #333333; opacity: 0.9\'>0</code> (minimum similarity) and <code style=\'color: #333333; opacity: 0.9\'>1</code> (maximum similarity).  This method can be used to perform a **keyword expansion**: expanding a query word with its synonyms or semantically similar words allows a more flexible search with respect to a traditional word match or boolean search system. Note that each element of *query terms* is considered independently from the others.  This method returns a dictionary with keys *Hits* (the number of *query terms* found in vocabulary), *OutOfVocabulary* (the number of query terms not found in vocabulary), and *Out*, which is a list of dictionaries with two keys: the first key (*Query*) contains the query term, while the second one (*Results*) contains a list of dictionaries, one for each similar word. Each dictionary contains the word retrieved (*Term*) and its *Score* representing the similarity with the searched word, ranging from <code style=\'color: #333333; opacity: 0.9\'>0</code> (minimum similarity) to <code style=\'color: #333333; opacity: 0.9\'>1</code> (maximum similarity).  If all searched words are out of vocabulary, an error is raised.
     * Similar Words
     */
    similarWordsPOST({ similarWordsQuery, size, srcLang }: SimilarWordsPOSTRequest): Observable<KeywordsResponse>
    similarWordsPOST({ similarWordsQuery, size, srcLang }: SimilarWordsPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<KeywordsResponse>>
    similarWordsPOST({ similarWordsQuery, size, srcLang }: SimilarWordsPOSTRequest, opts?: OperationOpts): Observable<KeywordsResponse | AjaxResponse<KeywordsResponse>> {
        throwIfNullOrUndefined(similarWordsQuery, 'similarWordsQuery', 'similarWordsPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (size != null) { query['size'] = size; }
        if (srcLang != null) { query['src_lang'] = srcLang; }

        return this.request<KeywordsResponse>({
            url: '/hr/v2/keywords/search/semantic/',
            method: 'POST',
            headers,
            query,
            body: similarWordsQuery,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum SimilarWordsInResumePOSTSrcLangEnum {
    It = 'it',
    En = 'en',
    Fr = 'fr',
    De = 'de',
    Pt = 'pt',
    Es = 'es'
}
/**
 * @export
 * @enum {string}
 */
export enum SimilarWordsPOSTSrcLangEnum {
    It = 'it',
    En = 'en',
    Fr = 'fr',
    De = 'de',
    Pt = 'pt',
    Es = 'es'
}
