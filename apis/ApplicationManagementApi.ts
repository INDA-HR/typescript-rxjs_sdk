// tslint:disable
/**
 * INDA HR - INtelligent Data Analysis for HR
 *  # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user\'s request only if their credits quota is greater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates\' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates\' personal information, and to put their attention on the candidate\'s skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is <span style=\"color:blue\">https<area>://api.inda.ai/hr/v2</span>. We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.  
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApplicationIDResponse,
    ApplicationResponsesStatus,
    ApplicationStatusRequest,
    ApplyItemRequest,
    BaseApplicationRequest,
    DeleteApplicationResponse,
    DeleteApplicationsResponse,
    DeleteCandidatesResponse,
    ErrorModel,
    GetApplicationResponse,
    GetApplicationsResponse,
    GetCandidatesResponse,
    HTTPValidationError,
    JobadId,
    PatchApplicationRequest,
    PatchApplicationResponse,
} from '../models';

export interface AddApplicationPOSTRequest {
    indexname: string;
    jobadId: JobadId;
    resumeId: string;
    baseApplicationRequest?: BaseApplicationRequest;
}

export interface AddApplicationStagePOSTRequest {
    indexname: string;
    resumeId: string;
    jobadId: JobadId;
    applicationStatusRequest: ApplicationStatusRequest;
}

export interface ApplicationStatusGETRequest {
    indexname: string;
    jobadId: JobadId;
    resumeId: string;
}

export interface ApplyPOSTRequest {
    indexname: string;
    jobadId: JobadId;
    applyItemRequest: ApplyItemRequest;
    resumeId?: string;
    srcLang?: ApplyPOSTSrcLangEnum;
    dstLang?: ApplyPOSTDstLangEnum;
}

export interface DeleteApplicantsDELETERequest {
    indexname: string;
    jobadId: JobadId;
}

export interface DeleteApplicationDELETERequest {
    indexname: string;
    jobadId: JobadId;
    resumeId: string;
}

export interface DeleteApplicationStageDELETERequest {
    indexname: string;
    jobadId: JobadId;
    resumeId: string;
    status: DeleteApplicationStageDELETEStatusEnum;
    date?: string;
}

export interface DeleteApplicationsDELETERequest {
    indexname: string;
    resumeId: string;
}

export interface GetApplicantsGETRequest {
    indexname: string;
    jobadId: JobadId;
    cache?: boolean;
    cacheTime?: number;
    offset?: number;
    searchId?: string;
    size?: number;
}

export interface GetApplicationGETRequest {
    indexname: string;
    resumeId: string;
    jobadId: JobadId;
}

export interface GetApplicationsGETRequest {
    indexname: string;
    resumeId: string;
    cache?: boolean;
    cacheTime?: number;
    offset?: number;
    searchId?: string;
    size?: number;
}

export interface PatchApplicationPATCHRequest {
    indexname: string;
    jobadId: JobadId;
    resumeId: string;
    patchApplicationRequest: PatchApplicationRequest;
}

/**
 * no description
 */
export class ApplicationManagementApi extends BaseAPI {

    /**
     *  This method stores on *indexname* the application made by the applicant *resume_id* to the job advertisement *jobad_id*.  It is assumed that both the resume and the job advertisement involved have been previously added to *indexname* by  the appropriate methods.  On the right, we provide an example of input structure; further details are available in dedicated sections.  
     * Add Application
     */
    addApplicationPOST({ indexname, jobadId, resumeId, baseApplicationRequest }: AddApplicationPOSTRequest): Observable<ApplicationIDResponse>
    addApplicationPOST({ indexname, jobadId, resumeId, baseApplicationRequest }: AddApplicationPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<ApplicationIDResponse>>
    addApplicationPOST({ indexname, jobadId, resumeId, baseApplicationRequest }: AddApplicationPOSTRequest, opts?: OperationOpts): Observable<ApplicationIDResponse | AjaxResponse<ApplicationIDResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'addApplicationPOST');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'addApplicationPOST');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'addApplicationPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ApplicationIDResponse>({
            url: '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/'.replace('{indexname}', encodeURI(indexname)).replace('{jobad_id}', encodeURI(jobadId)).replace('{resume_id}', encodeURI(resumeId)),
            method: 'POST',
            headers,
            body: baseApplicationRequest,
        }, opts?.responseOpts);
    };

    /**
     *  This method updates the applicant hiring pipeline by adding a new stage according to the requested values.  The supported stages for the hiring pipelines are: <code style=\'color: #333333; opacity: 0.9\'>APPLIED</code>, <code style=\'color: #333333; opacity: 0.9\'>SOURCED</code>, <code style=\'color: #333333; opacity: 0.9\'>SCREEN</code>, <code style=\'color: #333333; opacity: 0.9\'>INTERVIEW</code>, <code style=\'color: #333333; opacity: 0.9\'>EVALUATION</code>, <code style=\'color: #333333; opacity: 0.9\'>OFFER</code>, <code style=\'color: #333333; opacity: 0.9\'>HIRED</code>, <code style=\'color: #333333; opacity: 0.9\'>DISQUALIFIED</code>.  
     * Add Application Stage
     */
    addApplicationStagePOST({ indexname, resumeId, jobadId, applicationStatusRequest }: AddApplicationStagePOSTRequest): Observable<ApplicationIDResponse>
    addApplicationStagePOST({ indexname, resumeId, jobadId, applicationStatusRequest }: AddApplicationStagePOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<ApplicationIDResponse>>
    addApplicationStagePOST({ indexname, resumeId, jobadId, applicationStatusRequest }: AddApplicationStagePOSTRequest, opts?: OperationOpts): Observable<ApplicationIDResponse | AjaxResponse<ApplicationIDResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'addApplicationStagePOST');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'addApplicationStagePOST');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'addApplicationStagePOST');
        throwIfNullOrUndefined(applicationStatusRequest, 'applicationStatusRequest', 'addApplicationStagePOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ApplicationIDResponse>({
            url: '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/hiring-pipeline/stage/'.replace('{indexname}', encodeURI(indexname)).replace('{resume_id}', encodeURI(resumeId)).replace('{jobad_id}', encodeURI(jobadId)),
            method: 'POST',
            headers,
            body: applicationStatusRequest,
        }, opts?.responseOpts);
    };

    /**
     *  This method returns the status of an application, which can be any of the following: + *Processing*: the application is in INDA process queue; + *Available*: the application is in the index and is available to the user; + *Duplicate*: the application was a duplicate, refer to the indicated pair  (*ResumeID*, *JobAdID*) to retrieve the already indexed one; + *Failed*: the processing of the input failed; + *Missing*: none of the previous; the pair (*ResumeID*, *JobAdID*) may be wrong or corresponding to a deleted application. 
     * Application Status
     */
    applicationStatusGET({ indexname, jobadId, resumeId }: ApplicationStatusGETRequest): Observable<ApplicationResponsesStatus>
    applicationStatusGET({ indexname, jobadId, resumeId }: ApplicationStatusGETRequest, opts?: OperationOpts): Observable<AjaxResponse<ApplicationResponsesStatus>>
    applicationStatusGET({ indexname, jobadId, resumeId }: ApplicationStatusGETRequest, opts?: OperationOpts): Observable<ApplicationResponsesStatus | AjaxResponse<ApplicationResponsesStatus>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'applicationStatusGET');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'applicationStatusGET');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'applicationStatusGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ApplicationResponsesStatus>({
            url: '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/status/'.replace('{indexname}', encodeURI(indexname)).replace('{jobad_id}', encodeURI(jobadId)).replace('{resume_id}', encodeURI(resumeId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     *  This method adds a candidate resume to *indexname* and registers their application to *jobad_id*.  In an asynchronous fashion, the resume to be processed is added to the server\'s task queue and the assigned *ResumeID*  is returned immediately; when its processing is successfully completed and the resume is effectively added to  *indexname*, the pipeline continues with the candidate request to apply to the job advertisement identified by  *jobad_id*.  Under the hood, this method performs: + [Add Resume](https://api.inda.ai/hr/docs/v2/#operation/add_resume__POST)  + [Add Application](https://api.inda.ai/hr/docs/v2/#operation/add_application__POST)  Note that the document may not successfully conclude the processing pipeline (e.g., it may be discarded because duplicate of one of the documents already present in the *indexname*), and thus it may not be actually added to the index. The same may happen while processing the application request.  In order to verify the resume and the application status, the user can use the *ResumeID* and the *JobAdID* through  the following methods: + [Resume Status](https://api.inda.ai/hr/docs/v2/#operation/resume_status__GET) + [Application Status](https://api.inda.ai/hr/docs/v2/#operation/application_status__GET) + [Get Failures](https://api.inda.ai/hr/docs/v2/#operation/get_failures__GET)  On the right, we provide an example of input structure; further details are available in dedicated sections.  
     * Apply
     */
    applyPOST({ indexname, jobadId, applyItemRequest, resumeId, srcLang, dstLang }: ApplyPOSTRequest): Observable<ApplicationIDResponse>
    applyPOST({ indexname, jobadId, applyItemRequest, resumeId, srcLang, dstLang }: ApplyPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<ApplicationIDResponse>>
    applyPOST({ indexname, jobadId, applyItemRequest, resumeId, srcLang, dstLang }: ApplyPOSTRequest, opts?: OperationOpts): Observable<ApplicationIDResponse | AjaxResponse<ApplicationIDResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'applyPOST');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'applyPOST');
        throwIfNullOrUndefined(applyItemRequest, 'applyItemRequest', 'applyPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (resumeId != null) { query['resume_id'] = resumeId; }
        if (srcLang != null) { query['src_lang'] = srcLang; }
        if (dstLang != null) { query['dst_lang'] = dstLang; }

        return this.request<ApplicationIDResponse>({
            url: '/hr/v2/index/{indexname}/jobad/{jobad_id}/apply/'.replace('{indexname}', encodeURI(indexname)).replace('{jobad_id}', encodeURI(jobadId)),
            method: 'POST',
            headers,
            query,
            body: applyItemRequest,
        }, opts?.responseOpts);
    };

    /**
     *  This method removes all the applicants associated with *jobad_id* from the index *indexname*.  
     * Delete Applicants
     */
    deleteApplicantsDELETE({ indexname, jobadId }: DeleteApplicantsDELETERequest): Observable<DeleteCandidatesResponse>
    deleteApplicantsDELETE({ indexname, jobadId }: DeleteApplicantsDELETERequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteCandidatesResponse>>
    deleteApplicantsDELETE({ indexname, jobadId }: DeleteApplicantsDELETERequest, opts?: OperationOpts): Observable<DeleteCandidatesResponse | AjaxResponse<DeleteCandidatesResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'deleteApplicantsDELETE');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'deleteApplicantsDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<DeleteCandidatesResponse>({
            url: '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resumes/'.replace('{indexname}', encodeURI(indexname)).replace('{jobad_id}', encodeURI(jobadId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     *  This method removes the application associated with *jobad_id* and *resume_id* from the index *indexname*.  
     * Delete Application
     */
    deleteApplicationDELETE({ indexname, jobadId, resumeId }: DeleteApplicationDELETERequest): Observable<DeleteApplicationResponse>
    deleteApplicationDELETE({ indexname, jobadId, resumeId }: DeleteApplicationDELETERequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteApplicationResponse>>
    deleteApplicationDELETE({ indexname, jobadId, resumeId }: DeleteApplicationDELETERequest, opts?: OperationOpts): Observable<DeleteApplicationResponse | AjaxResponse<DeleteApplicationResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'deleteApplicationDELETE');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'deleteApplicationDELETE');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'deleteApplicationDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<DeleteApplicationResponse>({
            url: '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/'.replace('{indexname}', encodeURI(indexname)).replace('{jobad_id}', encodeURI(jobadId)).replace('{resume_id}', encodeURI(resumeId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     *  This method updates the applicant hiring pipeline by deleting a previously stored stage according to the requested  values.  The supported stages for the hiring pipelines are: <code style=\'color: #333333; opacity: 0.9\'>APPLIED</code>, <code style=\'color: #333333; opacity: 0.9\'>SOURCED</code>, <code style=\'color: #333333; opacity: 0.9\'>SCREEN</code>, <code style=\'color: #333333; opacity: 0.9\'>INTERVIEW</code>, <code style=\'color: #333333; opacity: 0.9\'>EVALUATION</code>, <code style=\'color: #333333; opacity: 0.9\'>OFFER</code>, <code style=\'color: #333333; opacity: 0.9\'>HIRED</code>, <code style=\'color: #333333; opacity: 0.9\'>DISQUALIFIED</code>.  Note that all the stages matching *status* and *date* (if present) query parameters will be removed from the  hiring pipeline.   
     * Delete Application Stage
     */
    deleteApplicationStageDELETE({ indexname, jobadId, resumeId, status, date }: DeleteApplicationStageDELETERequest): Observable<ApplicationIDResponse>
    deleteApplicationStageDELETE({ indexname, jobadId, resumeId, status, date }: DeleteApplicationStageDELETERequest, opts?: OperationOpts): Observable<AjaxResponse<ApplicationIDResponse>>
    deleteApplicationStageDELETE({ indexname, jobadId, resumeId, status, date }: DeleteApplicationStageDELETERequest, opts?: OperationOpts): Observable<ApplicationIDResponse | AjaxResponse<ApplicationIDResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'deleteApplicationStageDELETE');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'deleteApplicationStageDELETE');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'deleteApplicationStageDELETE');
        throwIfNullOrUndefined(status, 'status', 'deleteApplicationStageDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'status': status,
        };

        if (date != null) { query['date'] = (date as any).toISOString(); }

        return this.request<ApplicationIDResponse>({
            url: '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/hiring-pipeline/stage/'.replace('{indexname}', encodeURI(indexname)).replace('{jobad_id}', encodeURI(jobadId)).replace('{resume_id}', encodeURI(resumeId)),
            method: 'DELETE',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method removes all the applications associated with *resume_id* from the index *indexname*.  
     * Delete Applications
     */
    deleteApplicationsDELETE({ indexname, resumeId }: DeleteApplicationsDELETERequest): Observable<DeleteApplicationsResponse>
    deleteApplicationsDELETE({ indexname, resumeId }: DeleteApplicationsDELETERequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteApplicationsResponse>>
    deleteApplicationsDELETE({ indexname, resumeId }: DeleteApplicationsDELETERequest, opts?: OperationOpts): Observable<DeleteApplicationsResponse | AjaxResponse<DeleteApplicationsResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'deleteApplicationsDELETE');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'deleteApplicationsDELETE');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<DeleteApplicationsResponse>({
            url: '/hr/v2/index/{indexname}/resume/{resume_id}/applications/jobads/'.replace('{indexname}', encodeURI(indexname)).replace('{resume_id}', encodeURI(resumeId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     *  This method returns a list of UUID4 associated to applicants of the job advertisement with id *jobad_id* stored in the index *indexname*.  Query parameters are used to specify the *offset* and *size* of the search. The method uses *cache* = <code style=\'color: #333333; opacity: 0.9\'>true</code> by default, meaning that it will cache automatically each search for *cache_time* seconds. When caching is active, *offset* is ignored; in order to navigate or scroll the entire search response (in chunks of size *size*, as specified in the first search), this method should be used through the *search_id*. When *search_id* is provided, other query parameters are ignored, except *cache_time*.  The use of caching is highly recommended to improve the performances.  Note that a new *search_id* is provided for every scroll. Search IDs are not unique but it is strongly recommended to update the *search_id* at every call of this method with the *SearchID* of the last response. If the *SearchID* is missing or equal to <code style=\'color: #333333; opacity: 0.9\'>null</code>, the scroll has ended.  Beware that the scroll can ONLY go forward in the search cache because it is meant to review large searches.  
     * Get Applicants
     */
    getApplicantsGET({ indexname, jobadId, cache, cacheTime, offset, searchId, size }: GetApplicantsGETRequest): Observable<GetCandidatesResponse>
    getApplicantsGET({ indexname, jobadId, cache, cacheTime, offset, searchId, size }: GetApplicantsGETRequest, opts?: OperationOpts): Observable<AjaxResponse<GetCandidatesResponse>>
    getApplicantsGET({ indexname, jobadId, cache, cacheTime, offset, searchId, size }: GetApplicantsGETRequest, opts?: OperationOpts): Observable<GetCandidatesResponse | AjaxResponse<GetCandidatesResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'getApplicantsGET');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'getApplicantsGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (cache != null) { query['cache'] = cache; }
        if (cacheTime != null) { query['cache_time'] = cacheTime; }
        if (offset != null) { query['offset'] = offset; }
        if (searchId != null) { query['search_id'] = searchId; }
        if (size != null) { query['size'] = size; }

        return this.request<GetCandidatesResponse>({
            url: '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resumes/'.replace('{indexname}', encodeURI(indexname)).replace('{jobad_id}', encodeURI(jobadId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method returns the information related to the application stored with ids *resume_id* and *jobad_id* in the index *indexname*.  As reported in the schema below, the method has two different response schemas: + a *Status* response is returned when the application or the related [resume](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) is still in the processing queue, if the processing failed, or if the requested application has never been stored (e.g., resume processing failed when using [Apply](https://api.inda.ai/hr/docs/v2/#operation/apply__POST) method); + a *GetApplicationResponse* response is returned if the application has been successfully processed and inserted in the index. 
     * Get Application
     */
    getApplicationGET({ indexname, resumeId, jobadId }: GetApplicationGETRequest): Observable<GetApplicationResponse>
    getApplicationGET({ indexname, resumeId, jobadId }: GetApplicationGETRequest, opts?: OperationOpts): Observable<AjaxResponse<GetApplicationResponse>>
    getApplicationGET({ indexname, resumeId, jobadId }: GetApplicationGETRequest, opts?: OperationOpts): Observable<GetApplicationResponse | AjaxResponse<GetApplicationResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'getApplicationGET');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'getApplicationGET');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'getApplicationGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<GetApplicationResponse>({
            url: '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/'.replace('{indexname}', encodeURI(indexname)).replace('{resume_id}', encodeURI(resumeId)).replace('{jobad_id}', encodeURI(jobadId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     *  This method returns a list of UUID4 associated to those job advertisements that have the resume of id *resume_id* as applicant. Both resumes and job advertisements are stored in the *index* indexname.  Query parameters are used to specify the *offset* and *size* of the search. The method uses *cache* = <code style=\'color: #333333; opacity: 0.9\'>true</code> by default, meaning that it will cache automatically each search for *cache_time* seconds. When caching is active, *offset* is ignored; in order to navigate or scroll the entire search response (in chunks of size *size*, as specified in the first search), this method should be used through the *search_id*. When *search_id* is provided, other query parameters are ignored, except *cache_time*.  The use of caching is highly recommended to improve the performances.  Note that a new *search_id* is provided for every scroll. Search IDs are not unique but it is strongly recommended to update the *search_id* at every call of this method with the *SearchID* of the last response.  Beware that the scroll can ONLY go forward in the search cache because it is meant to review large searches.  
     * Get Applications
     */
    getApplicationsGET({ indexname, resumeId, cache, cacheTime, offset, searchId, size }: GetApplicationsGETRequest): Observable<GetApplicationsResponse>
    getApplicationsGET({ indexname, resumeId, cache, cacheTime, offset, searchId, size }: GetApplicationsGETRequest, opts?: OperationOpts): Observable<AjaxResponse<GetApplicationsResponse>>
    getApplicationsGET({ indexname, resumeId, cache, cacheTime, offset, searchId, size }: GetApplicationsGETRequest, opts?: OperationOpts): Observable<GetApplicationsResponse | AjaxResponse<GetApplicationsResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'getApplicationsGET');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'getApplicationsGET');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (cache != null) { query['cache'] = cache; }
        if (cacheTime != null) { query['cache_time'] = cacheTime; }
        if (offset != null) { query['offset'] = offset; }
        if (searchId != null) { query['search_id'] = searchId; }
        if (size != null) { query['size'] = size; }

        return this.request<GetApplicationsResponse>({
            url: '/hr/v2/index/{indexname}/resume/{resume_id}/applications/jobads/'.replace('{indexname}', encodeURI(indexname)).replace('{resume_id}', encodeURI(resumeId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     *  This method updates the information related to the application stored with id *resume_id* and *jobad_id*.  This method accepts an application/json body with the same structure as [Add Application](https://api.inda.ai/hr/docs/v2/#operation/add_application__POST) however in this case all fields are optional. Fields that contain differences between the corresponding original ones are substituted, while new fields are added. Bear in mind that lists are considered as singular value, therefore to modify an entry in a list it is necessary to insert the full list.  
     * Patch Application
     */
    patchApplicationPATCH({ indexname, jobadId, resumeId, patchApplicationRequest }: PatchApplicationPATCHRequest): Observable<PatchApplicationResponse>
    patchApplicationPATCH({ indexname, jobadId, resumeId, patchApplicationRequest }: PatchApplicationPATCHRequest, opts?: OperationOpts): Observable<AjaxResponse<PatchApplicationResponse>>
    patchApplicationPATCH({ indexname, jobadId, resumeId, patchApplicationRequest }: PatchApplicationPATCHRequest, opts?: OperationOpts): Observable<PatchApplicationResponse | AjaxResponse<PatchApplicationResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'patchApplicationPATCH');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'patchApplicationPATCH');
        throwIfNullOrUndefined(resumeId, 'resumeId', 'patchApplicationPATCH');
        throwIfNullOrUndefined(patchApplicationRequest, 'patchApplicationRequest', 'patchApplicationPATCH');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<PatchApplicationResponse>({
            url: '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/'.replace('{indexname}', encodeURI(indexname)).replace('{jobad_id}', encodeURI(jobadId)).replace('{resume_id}', encodeURI(resumeId)),
            method: 'PATCH',
            headers,
            body: patchApplicationRequest,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum ApplyPOSTSrcLangEnum {
    Pt = 'pt',
    It = 'it',
    En = 'en',
    De = 'de',
    Fr = 'fr',
    Es = 'es'
}
/**
 * @export
 * @enum {string}
 */
export enum ApplyPOSTDstLangEnum {
    Pt = 'pt',
    It = 'it',
    En = 'en',
    De = 'de',
    Fr = 'fr',
    Es = 'es'
}
/**
 * @export
 * @enum {string}
 */
export enum DeleteApplicationStageDELETEStatusEnum {
    Applied = 'APPLIED',
    Sourced = 'SOURCED',
    Screen = 'SCREEN',
    Interview = 'INTERVIEW',
    Evaluation = 'EVALUATION',
    Offer = 'OFFER',
    Hired = 'HIRED',
    Disqualified = 'DISQUALIFIED'
}
