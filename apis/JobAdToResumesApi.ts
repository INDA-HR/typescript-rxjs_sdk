// tslint:disable
/**
 * INDA HR - INtelligent Data Analysis for HR
 *  # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user\'s request only if their credits quota is greater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates\' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates\' personal information, and to put their attention on the candidate\'s skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is <span style=\"color:blue\">https<area>://api.inda.ai/hr/v2</span>. We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.  
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@intervieweb.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    BaseResumeMatchingEvidenceQuery,
    BaseResumeMatchingQuery,
    ErrorModel,
    HTTPValidationError,
    MatchResumeEvidenceResponse,
    ResumeMatchingEvidenceQuery,
    ResumeMatchingQuery,
    SearchResumeMatchResponse,
} from '../models';

export interface MatchResumesEvidenceFromIndexedJobadPOSTRequest {
    indexname: string;
    jobadId: string;
    baseResumeMatchingEvidenceQuery: BaseResumeMatchingEvidenceQuery;
}

export interface MatchResumesEvidencePOSTRequest {
    indexname: string;
    resumeMatchingEvidenceQuery: ResumeMatchingEvidenceQuery;
    srcLang?: MatchResumesEvidencePOSTSrcLangEnum;
}

export interface MatchResumesFromIndexedJobadPOSTRequest {
    indexname: string;
    jobadId: string;
    baseResumeMatchingQuery: BaseResumeMatchingQuery;
    size?: number;
    offset?: number;
    minScore?: number;
    dstLang?: Set<MatchResumesFromIndexedJobadPOSTDstLangEnum>;
    resumeLangs?: Set<MatchResumesFromIndexedJobadPOSTResumeLangsEnum>;
    onlyApplicants?: boolean;
    excludeApplicants?: boolean;
}

export interface MatchResumesPOSTRequest {
    indexname: string;
    resumeMatchingQuery: ResumeMatchingQuery;
    size?: number;
    offset?: number;
    minScore?: number;
    srcLang?: MatchResumesPOSTSrcLangEnum;
    dstLang?: Set<MatchResumesPOSTDstLangEnum>;
    resumeLangs?: Set<MatchResumesPOSTResumeLangsEnum>;
}

/**
 * no description
 */
export class JobAdToResumesApi extends BaseAPI {

    /**
     * This method can be used for a registerd job advert; it is analogous to the The [Match Resume Evidence](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_evidence__POST) method, but it takes in input the ID of the job advert instead of its JSON.  Please refer to the [Match Resumes Evidence](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_evidence__POST) description for further details on the method and on its output.
     * Match Resumes Evidence from indexed JobAd
     */
    matchResumesEvidenceFromIndexedJobadPOST({ indexname, jobadId, baseResumeMatchingEvidenceQuery }: MatchResumesEvidenceFromIndexedJobadPOSTRequest): Observable<MatchResumeEvidenceResponse>
    matchResumesEvidenceFromIndexedJobadPOST({ indexname, jobadId, baseResumeMatchingEvidenceQuery }: MatchResumesEvidenceFromIndexedJobadPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<MatchResumeEvidenceResponse>>
    matchResumesEvidenceFromIndexedJobadPOST({ indexname, jobadId, baseResumeMatchingEvidenceQuery }: MatchResumesEvidenceFromIndexedJobadPOSTRequest, opts?: OperationOpts): Observable<MatchResumeEvidenceResponse | AjaxResponse<MatchResumeEvidenceResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'matchResumesEvidenceFromIndexedJobadPOST');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'matchResumesEvidenceFromIndexedJobadPOST');
        throwIfNullOrUndefined(baseResumeMatchingEvidenceQuery, 'baseResumeMatchingEvidenceQuery', 'matchResumesEvidenceFromIndexedJobadPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<MatchResumeEvidenceResponse>({
            url: '/hr/v2/index/{indexname}/resumes/matching/jobad/{jobad_id}/evidence/'.replace('{indexname}', encodeURI(indexname)).replace('{jobad_id}', encodeURI(jobadId)),
            method: 'POST',
            headers,
            body: baseResumeMatchingEvidenceQuery,
        }, opts?.responseOpts);
    };

    /**
     * This method provides details about the score of a list of resumes according to the matching with a given job advert.  The method should be used after the call of [Match Resumes](https://api.inda.ai/hr/docs/v2/#operation/match_resumes__POST) or [Match Resumes from indexed JobAd](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_from_indexed_jobad__POST), on a *ResumeID* or a set of *ResumeID*s returned by one of these methods, in order to obtain the evidence of the matching score.  The relevant information for the matching evidence is the same described in the [Match Resumes](https://api.inda.ai/hr/docs/v2/#operation/match_resumes__POST) method.  For each resume *ID*, the method returns: + a matching score between the [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework) of the candidate and the job advert\'s required and preferred EQF (if any); + a matching score between the total duration of the candidate\'s work experiences and the job advert\'s required and preferred experience durations (if any); + a matching score between the candidate\'s seniority and the job advert\'s required and preferred seniorities (if any); + a detail for each skill in the resume, containing the relative matching score with respect to the job advert; + a detail for each job title in the resume, containing the relative matching score with respect to the job advert.  Each aforementioned matching score has to be considered as an affinity score between job advert\'s and candidate\'s data, which contributes to the final [Match Resumes](https://api.inda.ai/hr/docs/v2/#operation/match_resumes__POST) response\'s <code style=\'color: #333333; opacity: 0.9\'>Score</code>.  Any *ResumeID* not corresponding to an available resume in the index *indexname* will be ignored.  Note that the [Match Resumes Evidence from indexed JobAd](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_evidence_from_indexed_jobad__POST), method can be used for a job advert which has been already indexed.
     * Match Resumes Evidence
     */
    matchResumesEvidencePOST({ indexname, resumeMatchingEvidenceQuery, srcLang }: MatchResumesEvidencePOSTRequest): Observable<MatchResumeEvidenceResponse>
    matchResumesEvidencePOST({ indexname, resumeMatchingEvidenceQuery, srcLang }: MatchResumesEvidencePOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<MatchResumeEvidenceResponse>>
    matchResumesEvidencePOST({ indexname, resumeMatchingEvidenceQuery, srcLang }: MatchResumesEvidencePOSTRequest, opts?: OperationOpts): Observable<MatchResumeEvidenceResponse | AjaxResponse<MatchResumeEvidenceResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'matchResumesEvidencePOST');
        throwIfNullOrUndefined(resumeMatchingEvidenceQuery, 'resumeMatchingEvidenceQuery', 'matchResumesEvidencePOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (srcLang != null) { query['src_lang'] = srcLang; }

        return this.request<MatchResumeEvidenceResponse>({
            url: '/hr/v2/index/{indexname}/resumes/matching/jobad/evidence/'.replace('{indexname}', encodeURI(indexname)),
            method: 'POST',
            headers,
            query,
            body: resumeMatchingEvidenceQuery,
        }, opts?.responseOpts);
    };

    /**
     * This method performs a search among the resumes in index *indexname* to find the best matching for a given job advert.  The method can be used for any job advert which has been already added in the index. Note that, unless the parameter *only_applicants* is set to <code style=\'color: #333333; opacity: 0.9\'>false</code>, only the resumes registered to the job advert will be considered in the search.  Note also that the [Match Resumes](https://api.inda.ai/hr/docs/v2/#operation/match_resumes__POST) method should be used for a job advert which has not not yet been indexed.  Please refer to the [Match Resumes](https://api.inda.ai/hr/docs/v2/#operation/match_resumes__POST) method for details on the relevant information used for the matching, on the suggested filters, and on the output.  The [Match Resumes Evidence from indexed JobAd](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_evidence_from_indexed_jobad__POST) method can be used to obtain the evidence of the matching score.
     * Match Resumes from indexed JobAd
     */
    matchResumesFromIndexedJobadPOST({ indexname, jobadId, baseResumeMatchingQuery, size, offset, minScore, dstLang, resumeLangs, onlyApplicants, excludeApplicants }: MatchResumesFromIndexedJobadPOSTRequest): Observable<SearchResumeMatchResponse>
    matchResumesFromIndexedJobadPOST({ indexname, jobadId, baseResumeMatchingQuery, size, offset, minScore, dstLang, resumeLangs, onlyApplicants, excludeApplicants }: MatchResumesFromIndexedJobadPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<SearchResumeMatchResponse>>
    matchResumesFromIndexedJobadPOST({ indexname, jobadId, baseResumeMatchingQuery, size, offset, minScore, dstLang, resumeLangs, onlyApplicants, excludeApplicants }: MatchResumesFromIndexedJobadPOSTRequest, opts?: OperationOpts): Observable<SearchResumeMatchResponse | AjaxResponse<SearchResumeMatchResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'matchResumesFromIndexedJobadPOST');
        throwIfNullOrUndefined(jobadId, 'jobadId', 'matchResumesFromIndexedJobadPOST');
        throwIfNullOrUndefined(baseResumeMatchingQuery, 'baseResumeMatchingQuery', 'matchResumesFromIndexedJobadPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (size != null) { query['size'] = size; }
        if (offset != null) { query['offset'] = offset; }
        if (minScore != null) { query['min_score'] = minScore; }
        if (dstLang != null) { query['dst_lang'] = dstLang; }
        if (resumeLangs != null) { query['resume_langs'] = resumeLangs; }
        if (onlyApplicants != null) { query['only_applicants'] = onlyApplicants; }
        if (excludeApplicants != null) { query['exclude_applicants'] = excludeApplicants; }

        return this.request<SearchResumeMatchResponse>({
            url: '/hr/v2/index/{indexname}/resumes/matching/jobad/{jobad_id}/'.replace('{indexname}', encodeURI(indexname)).replace('{jobad_id}', encodeURI(jobadId)),
            method: 'POST',
            headers,
            query,
            body: baseResumeMatchingQuery,
        }, opts?.responseOpts);
    };

    /**
     * This method performs a search among the resumes in index *indexname* to find the best matchings for a given job advert.  The method should be used after the json of the job advert has been completely formed, but before the job advert is added in the index. We strongly recommend the use of the method [Match Resumes from indexed JobAd](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_from_indexed_jobad__POST),  for a job advert which has been already indexed, as it allows to focus on the resumes who registered to the  job advert.   Note also that the [JobAd Knowledge Extraction](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Knowledge-Extraction) methods can be used to enrich the job advert JSON with relevant information. The following information is particularly relevant and should be present in the job advert to obtain an accurate matching:  + The main job title  + Related job titles (if any)  + The required skills  + The preferred skills (if any)  Other relevant information -- e.g., required and preferred duration, required and preferred [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework)  -- is retrieved from the job advert JSON and contributes to the pertinence score of each resume, provided that the index contains a sufficient number of resumes with that information.  Optionally, a list of [*query filters*](https://api.inda.ai/hr/docs/v2/#tag/Query-Filters) (*QueryFilters*) can be provided to narrow the query. We strongly encourage use of query filters to reduce computation time and improve the result accuracy. For instance, the following filters may be used: + Filter on the last update date (*Metadata.LastModified*) + Filter on the [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework) (*Data.ProfileSummary.HighestEducationLevelCode.Value.EQF*) + Filter on the duration (*Data.ProfileSummary.WorkExperiencesTotalDuration.Value*) + Filter on the applicant address, if this is a relevant information  The Mandatory requirements specified within the *JobAd* (subfields of a *required* field) narrow the search to the suitable resumes, provided that the index contains a sufficient number of candidates with the information required to filter; if a requirement specified in the *JobAd* involves the same field associated to a filter specified in *QueryFilters*, the latter overrides the former.   Furthermore, in order to tackle the bias problem, INDA automatically ignores specific fields (such as name, gender, age and nationality) during the initial processing of each resume data. We are constantly working on reduce the bias in original data so that INDA results may be as fair as possible.   The method returns a list of JSON documents, each of which contains a resume that represents a job advert applicant; the resumes are sorted according to a pertinence score (*Score*) determined on the basis of the matching level in terms of the relevant information discussed above that are specified in the job advert. Please refer to the response sample on the right for further details on the output.  The [Match Resumes Evidence](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_evidence__POST) method can be used to obtain the evidence of the matching score.
     * Match Resumes
     */
    matchResumesPOST({ indexname, resumeMatchingQuery, size, offset, minScore, srcLang, dstLang, resumeLangs }: MatchResumesPOSTRequest): Observable<SearchResumeMatchResponse>
    matchResumesPOST({ indexname, resumeMatchingQuery, size, offset, minScore, srcLang, dstLang, resumeLangs }: MatchResumesPOSTRequest, opts?: OperationOpts): Observable<AjaxResponse<SearchResumeMatchResponse>>
    matchResumesPOST({ indexname, resumeMatchingQuery, size, offset, minScore, srcLang, dstLang, resumeLangs }: MatchResumesPOSTRequest, opts?: OperationOpts): Observable<SearchResumeMatchResponse | AjaxResponse<SearchResumeMatchResponse>> {
        throwIfNullOrUndefined(indexname, 'indexname', 'matchResumesPOST');
        throwIfNullOrUndefined(resumeMatchingQuery, 'resumeMatchingQuery', 'matchResumesPOST');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (size != null) { query['size'] = size; }
        if (offset != null) { query['offset'] = offset; }
        if (minScore != null) { query['min_score'] = minScore; }
        if (srcLang != null) { query['src_lang'] = srcLang; }
        if (dstLang != null) { query['dst_lang'] = dstLang; }
        if (resumeLangs != null) { query['resume_langs'] = resumeLangs; }

        return this.request<SearchResumeMatchResponse>({
            url: '/hr/v2/index/{indexname}/resumes/matching/jobad/'.replace('{indexname}', encodeURI(indexname)),
            method: 'POST',
            headers,
            query,
            body: resumeMatchingQuery,
        }, opts?.responseOpts);
    };

}

/**
 * @export
 * @enum {string}
 */
export enum MatchResumesEvidencePOSTSrcLangEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum MatchResumesFromIndexedJobadPOSTDstLangEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum MatchResumesFromIndexedJobadPOSTResumeLangsEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum MatchResumesPOSTSrcLangEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum MatchResumesPOSTDstLangEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
/**
 * @export
 * @enum {string}
 */
export enum MatchResumesPOSTResumeLangsEnum {
    Es = 'es',
    De = 'de',
    Pt = 'pt',
    Fr = 'fr',
    En = 'en',
    It = 'it'
}
